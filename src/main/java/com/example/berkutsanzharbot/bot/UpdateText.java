package com.example.berkutsanzharbot.bot;

import com.example.berkutsanzharbot.entity.User;
import com.example.berkutsanzharbot.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.client.okhttp.OkHttpTelegramClient;
import org.telegram.telegrambots.longpolling.util.LongPollingSingleThreadUpdateConsumer;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.meta.generics.TelegramClient;


import java.util.Optional;

@Component
@RequiredArgsConstructor
public class UpdateText implements LongPollingSingleThreadUpdateConsumer {

    private final TelegramClient telegramClient = new OkHttpTelegramClient(
            "7651372603:AAHdclFmWSHgmIUMYLY5tjZ8kbtWgFEV7ec");
    private final UserRepository userRepository;


    @Override
    public void consume(org.telegram.telegrambots.meta.api.objects.Update update) {
        String chatId = update.getMessage().getChatId().toString();
        String username = update.getMessage().getFrom().getUserName();
        System.out.println(chatId);
        String text = update.getMessage().getText();

// 1. –ò—â–µ–º –ø–æ chatId
        Optional<User> optionalUser = userRepository.findByChatId(chatId);

        if (optionalUser.isPresent()) {
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–≤—è–∑–∞–Ω ‚Äî –ø—Ä–æ—Å—Ç–æ —ç—Ö–æ
            User user = optionalUser.get();
            SendMessage sendMessage = new SendMessage(chatId, username + ", —è –ø–æ–ª—É—á–∏–ª –æ—Ç —Ç–µ–±—è —Å–æ–æ–±—â–µ–Ω–∏–µ:\n" + text);
            try {
                telegramClient.execute(sendMessage);
            } catch (Exception e) {
                e.printStackTrace();
            }

        } else {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –Ω–∞–π–¥–µ–Ω –ø–æ chatId ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º, –º–æ–∂–µ—Ç –æ–Ω –ø—Ä–∏—Å–ª–∞–ª —Ç–æ–∫–µ–Ω
            if (text.contains("_")) {
                Optional<User> userByToken = userRepository.findByTelegramToken(text);
                if (userByToken.isPresent()) {
                    User user = userByToken.get();
                    user.setChatId(chatId);
                    userRepository.save(user);

                    SendMessage sendMessage = new SendMessage(chatId, "‚úÖ –¢–æ–∫–µ–Ω –ø—Ä–∏–≤—è–∑–∞–Ω. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å!");
                    try {
                        telegramClient.execute(sendMessage);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                } else {
                    // –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ
                    SendMessage sendMessage = new SendMessage(chatId, "‚ùå –¢–∞–∫–æ–π —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å.");
                    try {
                        telegramClient.execute(sendMessage);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }

            } else {
                // –ü—Ä–æ—Å—Ç–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                SendMessage sendMessage = new SendMessage(chatId, "üí¨ –ß–∞—Ç –Ω–µ —Å–≤—è–∑–∞–Ω. –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω —Å –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: `Sanjar_abc123`");
                try {
                    telegramClient.execute(sendMessage);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }



    }